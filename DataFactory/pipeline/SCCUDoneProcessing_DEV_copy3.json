{
	"name": "SCCUDoneProcessing_DEV_copy3",
	"properties": {
		"activities": [
			{
				"name": "BBAlerts_Copy data1",
				"type": "Copy",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "SetStartingTime",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetCurrentTime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[alert].[sps_ReferenceFileReport]",
						"storedProcedureParameters": {
							"FromDateTime": {
								"type": "String",
								"value": {
									"value": "@variables('StartingTime')",
									"type": "Expression"
								}
							},
							"IncidentIds": {
								"type": "String",
								"value": "[102,104,105,106,107,108,109,110,60,15,9]"
							},
							"ToDateTime": {
								"type": "String",
								"value": {
									"value": "@variables('EndingTime')",
									"type": "Expression"
								}
							},
							"Types": {
								"type": "String",
								"value": "[\"text\",\"email\"]"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "SubscriptionID",
									"type": "Int32",
									"physicalType": "int"
								},
								"sink": {
									"name": "SubscriptionID",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "Type",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "Type",
									"type": "String",
									"physicalType": "String"
								}
							},
							{
								"source": {
									"name": "MessageContent",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "MessageContent",
									"type": "String",
									"physicalType": "String"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DEV_BBAlertsDataSet",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DEV_DoneProcessingDataSet",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "GetLastProcessedDateTime",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT LastProcessedDateTime\nFROM ExternalAlertImportLog\n",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DEV_SQLDataSet",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "SetStartingTime",
				"type": "SetVariable",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "StartingTime",
					"value": {
						"value": "@formatDateTime(activity('GetLastProcessedDateTime').output.firstRow.LastProcessedDateTime, 'yyyy-MM-dd HH:mm:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SetCurrentTime",
				"type": "SetVariable",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "EndingTime",
					"value": {
						"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "UpdateLastProcessedDateTime",
				"type": "Script",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "BBAlerts_Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataDev",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "UPDATE ExternalAlertImportLog\nSET LastProcessedDateTime = '@{variables('EndingTime')}'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "GetTimeIntervals",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "GetLastProcessedDateTime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[GetDatesBy30MinuteInterval]"
				},
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataDev",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LoopThroughIntervals",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetTimeIntervals",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetTimeIntervals').output.result",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "BBAlerts_Copy data1_copy1",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "SetStartingTime_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "SetCurrentTime_copy1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[alert].[sps_ReferenceFileReport]",
									"storedProcedureParameters": {
										"FromDateTime": {
											"type": "String",
											"value": {
												"value": "@variables('StartingTime')",
												"type": "Expression"
											}
										},
										"IncidentIds": {
											"type": "String",
											"value": "[102,104,105,106,107,108,109,110,60,15,9]"
										},
										"ToDateTime": {
											"type": "String",
											"value": {
												"value": "@variables('EndingTime')",
												"type": "Expression"
											}
										},
										"Types": {
											"type": "String",
											"value": "[\"text\",\"email\"]"
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobStorageWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "SubscriptionID",
												"type": "Int32",
												"physicalType": "int"
											},
											"sink": {
												"name": "SubscriptionID",
												"type": "String",
												"physicalType": "String"
											}
										},
										{
											"source": {
												"name": "Type",
												"type": "String",
												"physicalType": "nvarchar"
											},
											"sink": {
												"name": "Type",
												"type": "String",
												"physicalType": "String"
											}
										},
										{
											"source": {
												"name": "MessageContent",
												"type": "String",
												"physicalType": "nvarchar"
											},
											"sink": {
												"name": "MessageContent",
												"type": "String",
												"physicalType": "String"
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "DEV_BBAlertsDataSet",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DEV_DoneProcessingDataSet",
									"type": "DatasetReference"
								}
							]
						},
						{
							"name": "SetStartingTime_copy1",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "StartingTime",
								"value": {
									"value": "@formatDateTime(activity('GetTimeIntervals').output.firstRow.startingtime, 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "SetCurrentTime_copy1",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "EndingTime",
								"value": {
									"value": "@formatDateTime(activity('GetTimeIntervals').output.firstRow.endingtime, 'yyyy-MM-dd HH:mm:ss')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "UpdateLastProcessedDateTime_copy1",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "LoopThroughIntervals",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "SCCU_BusinessDataDev",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "UPDATE ExternalAlertImportLog\nSET LastProcessedDateTime = '@{variables('EndingTime')}'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"concurrency": 1,
		"variables": {
			"StartingTime": {
				"type": "String"
			},
			"EndingTime": {
				"type": "String"
			}
		},
		"annotations": []
	}
}